name: LaTeX Build and Textlint Check

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  textlint:
    name: Run textlint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install textlint
        run: |
          npm install -g \
          textlint \
          textlint-rule-preset-ja-technical-writing \
          textlint-rule-prh \
          textlint-rule-preset-ja-spacing \
          textlint-rule-spellcheck-tech-word \
          textlint-plugin-latex2e

      - name: Run textlint
        id: textlint
        run: |
          textlint src/**/*.tex > textlint-result.txt 2>&1 || echo "error=true" >> $GITHUB_OUTPUT
          cat textlint-result.txt

      - name: Create summary
        if: always()
        run: |
          if [ "${{ steps.textlint.outputs.error }}" == "true" ]; then
            echo "## ❌ textlint Check Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "以下の問題が見つかりました:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat textlint-result.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "## ✅ textlint Check Passed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "文章チェックが正常に完了しました。" >> $GITHUB_STEP_SUMMARY
          fi

  build:
    name: Build PDF
    runs-on: ubuntu-latest
    needs: textlint  # ✅ textlint成功後に実行される
    if: success()     # ✅ textlint失敗時はスキップ

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create output directory
        run: mkdir -p src/output

      - name: Build PDF with Docker
        run: |
          docker compose build latex
          docker compose up build

      - name: Check and move PDF
        run: |
          if [ -f src/output/main.pdf ]; then
            echo "✅ PDF successfully created"
          else
            echo "❌ PDF file was not created"
            docker compose logs build
            exit 1
          fi

      - name: Upload PDF as artifact
        uses: actions/upload-artifact@v4
        with:
          name: main-pdf
          path: src/output/main.pdf
          retention-days: 30

  upload:
    name: Upload to Google Drive
    runs-on: ubuntu-latest
    needs: build
    if: success()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download PDF artifact
        uses: actions/download-artifact@v4
        with:
          name: main-pdf
          path: src/output

      - name: Install Python dependencies
        run: |
          pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client

      - name: Upload to Google Drive via OAuth
        env:
          GDRIVE_CREDENTIALS_JSON: ${{ secrets.GDRIVE_CREDENTIALS_JSON }}
          GDRIVE_TOKEN_JSON: ${{ secrets.GDRIVE_TOKEN_JSON }}
          GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
        run: |
          python3 << 'EOF'
          import os, json
          from datetime import datetime
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload
          from google.oauth2.credentials import Credentials

          creds_info = json.loads(os.environ['GDRIVE_CREDENTIALS_JSON'])
          token_info = json.loads(os.environ['GDRIVE_TOKEN_JSON'])
          creds = Credentials.from_authorized_user_info(token_info, scopes=['https://www.googleapis.com/auth/drive.file'])
          service = build('drive', 'v3', credentials=creds)

          timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
          file_name = f"main_{timestamp}.pdf"
          metadata = {'name': file_name}
          if os.environ.get('GOOGLE_DRIVE_FOLDER_ID'):
              metadata['parents'] = [os.environ['GOOGLE_DRIVE_FOLDER_ID']]
          media = MediaFileUpload('src/output/main.pdf', mimetype='application/pdf')
          file = service.files().create(body=metadata, media_body=media, fields='id').execute()
          print(f"✅ Uploaded: https://drive.google.com/file/d/{file['id']}/view")
          EOF
