name: LaTeX Build and Textlint Check

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  textlint:
    name: Run textlint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Clear npm cache and confirm registry
        run: |
          npm cache clean --force
          npm config set registry https://registry.npmjs.org/
          npm config get registry

      - name: Install textlint
        run: |
          npm install -g \
            textlint \
            textlint-rule-preset-ja-technical-writing \
            textlint-rule-prh \
            textlint-rule-preset-ja-spacing \
            textlint-rule-spellcheck-tech-word \
            textlint-plugin-latex2e

      - name: Run textlint (JSON output)
        id: textlint
        run: |
          # title.tex を除外して textlint 実行
          find src -name '*.tex' ! -name 'title.tex' -print0 | xargs -0 textlint --format json > textlint-result.json || echo "error=true" >> $GITHUB_OUTPUT


      - name: Summarize and send to Discord
        if: always()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          python3 << 'EOF'
          import json, os
          import requests
          from datetime import datetime
        
          summary = ""
          try:
              with open("textlint-result.json", "r", encoding="utf-8") as f:
                  results = json.load(f)
                  # ファイルごとにまとめる
                  file_dict = {}
                  for r in results:
                      file_path = r.get("filePath", "unknown file")
                      messages = r.get("messages", [])
                      if not messages:
                          continue
                      lines = []
                      for m in messages:
                          line = m.get("line", "?")
                          rule_id = m.get("ruleId", "?")
                          message = m.get("message", "")
                          suggestion = ""
                          if "→" in message:
                              suggestion = f" 修正案: {message.split('→')[-1].strip()}"
                          lines.append(f"- line {line} [{rule_id}]: {message}{suggestion}")
                      if lines:
                          file_dict[file_path] = lines
                      
                  # まとめて文字列に変換
                  for file_path, lines in file_dict.items():
                      summary += f"**ファイル:** {file_path}\n"
                      summary += "\n".join(lines) + "\n\n"
                  
          except Exception as e:
              summary = f"Failed to parse textlint JSON: {e}"
          
          if not summary:
              summary = "文章チェックに問題はありません。"
          
          payload = {
              "embeds": [{
                  "title": "❌ Textlint Check Summary" if "error=true" in os.environ.get("GITHUB_OUTPUT", "") else "✅ Textlint Passed",
                  "description": summary[:4000],  # Discord embedの制限に注意
                  "color": 15158332 if "error=true" in os.environ.get("GITHUB_OUTPUT", "") else 3066993,
                  "timestamp": datetime.utcnow().isoformat()
              }]
          }
              
          requests.post(os.environ["DISCORD_WEBHOOK_URL"], json=payload)
          EOF


  build:
    name: Build PDF
    runs-on: ubuntu-latest
    needs: textlint
    if: success()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create output directory
        run: mkdir -p src/output

      - name: Build PDF with Docker
        run: |
          docker compose build latex
          docker compose up build

      - name: Check and move PDF
        run: |
          if [ -f src/output/main.pdf ]; then
            echo "✅ PDF successfully created"
          else
            echo "❌ PDF file was not created"
            docker compose logs build
            exit 1
          fi

      - name: Upload PDF as artifact
        uses: actions/upload-artifact@v4
        with:
          name: main-pdf
          path: src/output/main.pdf
          retention-days: 30

  upload:
    name: Upload to Google Drive
    runs-on: ubuntu-latest
    needs: build
    if: success()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download PDF artifact
        uses: actions/download-artifact@v4
        with:
          name: main-pdf
          path: src/output

      - name: Install Python dependencies
        run: |
          pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client

      - name: Upload to Google Drive via OAuth
        id: upload
        env:
          GDRIVE_CREDENTIALS_JSON: ${{ secrets.GDRIVE_CREDENTIALS_JSON }}
          GDRIVE_TOKEN_JSON: ${{ secrets.GDRIVE_TOKEN_JSON }}
          GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
        run: |
          python3 << 'EOF'
          import os, json
          from datetime import datetime
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload
          from google.oauth2.credentials import Credentials

          # 認証情報を復元
          creds_info = json.loads(os.environ['GDRIVE_CREDENTIALS_JSON'])
          token_info = json.loads(os.environ['GDRIVE_TOKEN_JSON'])
          creds = Credentials.from_authorized_user_info(token_info, scopes=['https://www.googleapis.com/auth/drive.file'])

          service = build('drive', 'v3', credentials=creds)

          timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
          file_name = f"main_{timestamp}.pdf"

          metadata = {'name': file_name}
          if os.environ.get('GOOGLE_DRIVE_FOLDER_ID'):
              metadata['parents'] = [os.environ['GOOGLE_DRIVE_FOLDER_ID']]

          media = MediaFileUpload('src/output/main.pdf', mimetype='application/pdf')
          file = service.files().create(body=metadata, media_body=media, fields='id').execute()

          file_id = file.get('id')
          file_url = f'https://drive.google.com/file/d/{file_id}/view'

          print(f'✅ PDF uploaded: {file_url}')

          # GitHub output
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f'file_url={file_url}\n')
              f.write(f'file_name={file_name}\n')
              f.write(f'success=true\n')
          EOF

      - name: Send Discord notification on success
        if: steps.upload.outputs.success == 'true'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
          COMMIT_MESSAGE=$(git log -1 --pretty=%B ${COMMIT_SHA})
          COMMIT_AUTHOR=$(git log -1 --pretty=%an ${COMMIT_SHA})
          COMMIT_URL="${{ github.event.repository.html_url }}/commit/${COMMIT_SHA}"
          
          curl -H "Content-Type: application/json" \
            -d "{
              \"embeds\": [{
                \"title\": \"📄 PDF Build Successful\",
                \"description\": \"PDFが正常にビルドされ、Google Driveにアップロードされました\",
                \"color\": 3066993,
                \"fields\": [
                  {
                    \"name\": \"📁 ファイル名\",
                    \"value\": \"${{ steps.upload.outputs.file_name }}\",
                    \"inline\": false
                  },
                  {
                    \"name\": \"🔗 Google Drive\",
                    \"value\": \"[ファイルを開く](${{ steps.upload.outputs.file_url }})\",
                    \"inline\": false
                  },
                  {
                    \"name\": \"👤 コミット作成者\",
                    \"value\": \"${COMMIT_AUTHOR}\",
                    \"inline\": true
                  },
                  {
                    \"name\": \"📝 コミットメッセージ\",
                    \"value\": \"${COMMIT_MESSAGE}\",
                    \"inline\": false
                  },
                  {
                    \"name\": \"🔗 コミット\",
                    \"value\": \"[View on GitHub](${COMMIT_URL})\",
                    \"inline\": false
                  }
                ],
                \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
              }]
            }" \
            "${DISCORD_WEBHOOK_URL}"

      - name: Update build workflow summary
        if: steps.upload.outputs.success == 'true'
        run: |
          BUILD_RUN_URL="${{ github.event.workflow_run.html_url }}"
          FILE_URL="${{ steps.upload.outputs.file_url }}"
          FILE_NAME="${{ steps.upload.outputs.file_name }}"
          
          echo "## 📄 PDF Build and Upload Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ PDF has been successfully built and uploaded to Google Drive." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Workflow**: [View Build Log](${BUILD_RUN_URL})" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.event.workflow_run.head_sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.event.workflow_run.head_branch }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Author**: ${{ github.event.workflow_run.actor.login }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Upload Information" >> $GITHUB_STEP_SUMMARY
          echo "- **File Name**: ${FILE_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "- **Google Drive**: [Open File](${FILE_URL})" >> $GITHUB_STEP_SUMMARY

      - name: Send Discord notification on failure
        if: failure()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
          COMMIT_MESSAGE=$(git log -1 --pretty=%B ${COMMIT_SHA})
          COMMIT_AUTHOR=$(git log -1 --pretty=%an ${COMMIT_SHA})
          COMMIT_URL="${{ github.event.repository.html_url }}/commit/${COMMIT_SHA}"
          RUN_URL="${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}"
          
          curl -H "Content-Type: application/json" \
            -d "{
              \"embeds\": [{
                \"title\": \"❌ PDF Upload Failed\",
                \"description\": \"PDFのアップロードに失敗しました\",
                \"color\": 15158332,
                \"fields\": [
                  {
                    \"name\": \"👤 コミット作成者\",
                    \"value\": \"${COMMIT_AUTHOR}\",
                    \"inline\": true
                  },
                  {
                    \"name\": \"📝 コミットメッセージ\",
                    \"value\": \"${COMMIT_MESSAGE}\",
                    \"inline\": false
                  },
                  {
                    \"name\": \"🔗 詳細を確認\",
                    \"value\": \"[GitHub Actions Log](${RUN_URL})\",
                    \"inline\": false
                  }
                ],
                \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
              }]
            }" \
            "${DISCORD_WEBHOOK_URL}"
