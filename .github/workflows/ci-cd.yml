name: Build LaTeX and Upload to Google Drive

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  build:
    name: Build PDF
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create output directory
        run: |
          mkdir -p src/output

      - name: Build PDF with Docker
        run: |
          docker compose build latex
          docker compose up build

      - name: List files for debugging
        run: |
          echo "=== Checking src directory ==="
          ls -la src/
          echo "=== Checking for PDF files ==="
          find src/ -name "*.pdf" || echo "No PDF files found"

      - name: Check if PDF was created
        run: |
          if [ -f src/main.pdf ]; then
            echo "PDF found at src/main.pdf"
            mkdir -p src/output
            mv src/main.pdf src/output/main.pdf
          elif [ -f src/output/main.pdf ]; then
            echo "PDF found at src/output/main.pdf"
          else
            echo "Error: PDF file was not created"
            echo "=== Docker build logs ==="
            docker compose logs build
            exit 1
          fi
          echo "PDF successfully created"

      - name: Upload PDF as artifact
        uses: actions/upload-artifact@v4
        with:
          name: main-pdf
          path: src/output/main.pdf
          retention-days: 30

      - name: Clean up
        if: always()
        run: |
          docker compose up clean || true

  upload:
    name: Upload to Google Drive
    runs-on: ubuntu-latest
    needs: build
    if: success()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download PDF artifact
        uses: actions/download-artifact@v4
        with:
          name: main-pdf
          path: src/output

      - name: Install Python dependencies
        run: |
          pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client

      - name: Upload to Google Drive via OAuth
        id: upload
        env:
          GDRIVE_CREDENTIALS_JSON: ${{ secrets.GDRIVE_CREDENTIALS_JSON }}
          GDRIVE_TOKEN_JSON: ${{ secrets.GDRIVE_TOKEN_JSON }}
          GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
        run: |
          python3 << 'EOF'
          import os, json
          from datetime import datetime
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload
          from google.oauth2.credentials import Credentials

          # Ë™çË®ºÊÉÖÂ†±„ÇíÂæ©ÂÖÉ
          creds_info = json.loads(os.environ['GDRIVE_CREDENTIALS_JSON'])
          token_info = json.loads(os.environ['GDRIVE_TOKEN_JSON'])
          creds = Credentials.from_authorized_user_info(token_info, scopes=['https://www.googleapis.com/auth/drive.file'])

          service = build('drive', 'v3', credentials=creds)

          timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
          file_name = f"main_{timestamp}.pdf"

          metadata = {'name': file_name}
          if os.environ.get('GOOGLE_DRIVE_FOLDER_ID'):
              metadata['parents'] = [os.environ['GOOGLE_DRIVE_FOLDER_ID']]

          media = MediaFileUpload('src/output/main.pdf', mimetype='application/pdf')
          file = service.files().create(body=metadata, media_body=media, fields='id').execute()

          file_id = file.get('id')
          file_url = f'https://drive.google.com/file/d/{file_id}/view'

          print(f'‚úÖ PDF uploaded: {file_url}')

          # GitHub output
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f'file_url={file_url}\n')
              f.write(f'file_name={file_name}\n')
              f.write(f'success=true\n')
          EOF

      - name: Create workflow summary
        if: steps.upload.outputs.success == 'true'
        run: |
          FILE_URL="${{ steps.upload.outputs.file_url }}"
          FILE_NAME="${{ steps.upload.outputs.file_name }}"
          
          echo "## üìÑ PDF Build and Upload Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ PDF has been successfully built and uploaded to Google Drive." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Author**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Upload Information" >> $GITHUB_STEP_SUMMARY
          echo "- **File Name**: ${FILE_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "- **Google Drive**: [Open File](${FILE_URL})" >> $GITHUB_STEP_SUMMARY

      - name: Send Discord notification on success
        if: steps.upload.outputs.success == 'true'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          COMMIT_AUTHOR=$(git log -1 --pretty=%an)
          COMMIT_URL="${{ github.event.repository.html_url }}/commit/${{ github.sha }}"
          
          curl -H "Content-Type: application/json" \
            -d "{
              \"embeds\": [{
                \"title\": \"üìÑ PDF Build Successful\",
                \"description\": \"PDF„ÅåÊ≠£Â∏∏„Å´„Éì„É´„Éâ„Åï„Çå„ÄÅGoogle Drive„Å´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åï„Çå„Åæ„Åó„Åü\",
                \"color\": 3066993,
                \"fields\": [
                  {
                    \"name\": \"üìÅ „Éï„Ç°„Ç§„É´Âêç\",
                    \"value\": \"${{ steps.upload.outputs.file_name }}\",
                    \"inline\": false
                  },
                  {
                    \"name\": \"üîó Google Drive\",
                    \"value\": \"[„Éï„Ç°„Ç§„É´„ÇíÈñã„Åè](${{ steps.upload.outputs.file_url }})\",
                    \"inline\": false
                  },
                  {
                    \"name\": \"üë§ „Ç≥„Éü„ÉÉ„Éà‰ΩúÊàêËÄÖ\",
                    \"value\": \"${COMMIT_AUTHOR}\",
                    \"inline\": true
                  },
                  {
                    \"name\": \"üìù „Ç≥„Éü„ÉÉ„Éà„É°„ÉÉ„Çª„Éº„Ç∏\",
                    \"value\": \"${COMMIT_MESSAGE}\",
                    \"inline\": false
                  },
                  {
                    \"name\": \"üîó „Ç≥„Éü„ÉÉ„Éà\",
                    \"value\": \"[View on GitHub](${COMMIT_URL})\",
                    \"inline\": false
                  }
                ],
                \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
              }]
            }" \
            "${DISCORD_WEBHOOK_URL}"

      - name: Send Discord notification on failure
        if: failure()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          COMMIT_AUTHOR=$(git log -1 --pretty=%an)
          COMMIT_URL="${{ github.event.repository.html_url }}/commit/${{ github.sha }}"
          RUN_URL="${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}"
          
          curl -H "Content-Type: application/json" \
            -d "{
              \"embeds\": [{
                \"title\": \"‚ùå PDF Upload Failed\",
                \"description\": \"PDF„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü\",
                \"color\": 15158332,
                \"fields\": [
                  {
                    \"name\": \"üë§ „Ç≥„Éü„ÉÉ„Éà‰ΩúÊàêËÄÖ\",
                    \"value\": \"${COMMIT_AUTHOR}\",
                    \"inline\": true
                  },
                  {
                    \"name\": \"üìù „Ç≥„Éü„ÉÉ„Éà„É°„ÉÉ„Çª„Éº„Ç∏\",
                    \"value\": \"${COMMIT_MESSAGE}\",
                    \"inline\": false
                  },
                  {
                    \"name\": \"üîó Ë©≥Á¥∞„ÇíÁ¢∫Ë™ç\",
                    \"value\": \"[GitHub Actions Log](${RUN_URL})\",
                    \"inline\": false
                  }
                ],
                \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
              }]
            }" \
            "${DISCORD_WEBHOOK_URL}"